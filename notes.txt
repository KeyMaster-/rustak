# Game API requirements
Re-gathering now that I'm adding history unwind/rewind (this needs other terminology)

# View
    State that needs to be accessible to display the game

  Board
    board size
    stacks on each space
    Partial move state
      if placement: active placement location
      if movement: carried stones over specific location, start location, chosen direction, 
        To be able to visualise allowable click locations

  Match
    remaining stones held by each player
    current active player
    current turn number
    history of complete moves

# Interaction
    Functionality needed for interacting with the game

  Next Move
    Make move action
      Try to place
      Try to pick up
      Try to drop / move-drop
      Undo to start state (no action in progress)
      Undo to a specific point in a movement (when cur_loc == clicked loc)

    History unwind/rewind
      Jump to state after move N
        Can use move 0 as "start of game" (blank board), then move 1 is "after white's first move", etc etc
        Can jump to current state, including partial move action, by jumping to the number of the move in progress
          e.g. if you're playing black making your first move (move 2 in total), jump to 2 will go to the most progressed state of the board, i.e. including partial moves
        Any target N beyond move in progress should error
          As a UX help, even if the current move hasn't been started yet, jumping to it should be allowed.
          I.e. if white played move 2, black hasn't done anything yet, jump to 2 is allowed, just as if black had started doing their move.

      Crucial note here: Jumping doesn't alter history. Action do/undo does.
        Should be able to use the same code internally to alter the game state.
        What matters is whether we push/pop action history


Observation: The history of a game defines its state.

# Struct data size analysis
order + stack alloc size
pub struct Game { | 200 bytes
  board: Board | 48
    stacks: Grid<StoneStack> | 40
    size: BoardSize | 8

  held_stones: GameHeldStones | 32
    white: HeldStones | 16
      board_size: BoardSize | 8
      flat: u8 | 1
      capstone: u8 | 1
      + 6 padding

    black: HeldStones | 16
      board_size: BoardSize | 8
      flat: u8 | 1
      capstone: u8 | 1
      + 6 padding

  move_state: MoveState | 88 (MoveState::Movement determines sizes as it is bigger)
    discriminator | 1
    dir: Option<Direction> | 1
    + 6 padding
    start: Location | 16
    cur_loc: Location | 16
    carry: StoneStack | 24
    drops: Vec<usize> | 24

  action_history: Vec<HistoryAction> | 24

  moves: u32 | 4

  state: GameState | 2

  + 2 padding
}

heap alloc. S is boardsize
pub struct Game {
  board: Board
    stacks: Grid<StoneStack>
      data | SxS * 24 (size of StoneStack)
        + _ * 2
        + _ * 2 Vec reserves

    size: BoardSize

  held_stones: GameHeldStones
    white: HeldStones
      board_size: BoardSize
      flat: u8
      capstone: u8
      + 6 padding

    black: HeldStones
      board_size: BoardSize
      flat: u8
      capstone: u8
      + 6 padding

  move_state: MoveState
    discriminator
    dir: Option<Direction>
    + 6 padding
    start: Location
    cur_loc: Location
    carry: StoneStack
    drops: Vec<usize>

  action_history: Vec<HistoryAction> | 24

  moves: u32 | 4

  state: GameState | 2

  + 2 padding
}

5x5 base alloc: 800. 200 stack + 600 heap for the stacks grid
1, placement move b2: 1192
  + 384 | 2 * 96 for 2 HistoryActions, + 2 * 96 for 2 reserved by action_history Vec
  + 8 | 1 * 2 for 1 Stone that was placed, + 3 * 2 for 3 stones reserved by the holding StoneStack

2, placement move c2: 1194
  2 new history actions, which used up the 2 reserved
  supposedly 4 reserved stones in the second in-use StoneStack. Would've expected overall count to increase by 8

3, move c2<: 1586
  + 384, 3 used HistoryActions, one more reserved
  - 6 (?), c2 stack array went down to 1. Doesn't really match previous reported number though
  + 8, drops array in Drop HistoryAction (I'm guessing)


# Structure
x need a utility parsing function file to include in parse.rs and in tests.rs
x Allow StoneStack to be empty, get rid of boardspace etc as a result.
  Try this on a branch, see if it actually improves code structure.
x Better error types in test parsing functions.
  Need to handle nom errors (with input location context and custom context strings)
  as well as object construction errors.
    Need to understand how the add context & combine error functions work.
    I think as a parse tree fails upwards, it accumulates errors.
  Outcome: 
    Nom 5's map_res discards the map's error and replaces it with a simple "MapRes" error kind.
    This means that the construction errors get entirely discarded.
    To get around this, moved to the nom 6 alpha, which includes changes to propagate the map_res error.
      This also added a `finish()` method which converts IResult to Result. This is close to but not quite
      what I do with finalise (it doesn't convert (Remaining, Output) to just Output). Might be worth suggesting
      on the nom repo in the future?
    Copied Amos' custom error type (which largely compies VerboseError) for error accumulating and some formatting.
    Added the FromExternalError trait to accept generic construction errors.
    Included thiserror to make all of lib's errors into std::error::Errors since that's what FromExternalError wants.
  
. Add error context to appropriate places in the test parsers.
x Better error types for game types (see todos)
  Outcome: All the relevant actions only failed due to a single reason now, so adding an error type seems unnecessary.
x Add bounded integer crate and use it for size and position values
  This should remove some range checks at construction time, e.g. for board size.
  This won't get around checking location-in-board cases, I don't want to tie the location type to board size.
  Outcome: 
    This did indeed remove a bunch of checks and Option<Self> returns, happy with it.
    Did require patching bounded-integer though, since it added ops for unsigned types even though the underlying type does not support those ops.
    Namely saturating neg and all variations of abs.

. Maybe separate out the binary and library of this, since the binary has a few dependencies that the library doesn't need.
. Remove vendored bounded integer library
. Move board into its own module
  This makes things more organised, and also enforces using the board's 
  public interface for manipulating it.

# Move builder
- make move builder separate object, or part of the game?
  move builder needs access to board and stones. turn and state is technically only needed when committing a move.
  when we commit a move, we already have the changed board&pieces state. if separate, need to copy back.
  with granular undo, don't need to keep a copy of the old state.
  Make it part of the game object I think.

- now that move logic moves outside of the board struct, need to provide additional accessors to mutate it.
  get mutable stone stack at location, mainly
  Turned out that I didn't need this - since everything is in the same module atm all the code has access to all the struct internals

x Action undo

## Cleanup
x Clean out board's make_move and related unused types/functions
x Clean up commented-out old code (e.g. old game make_move)
. Sort out the ActionInvalidReason / MoveInvalidReason difference
  Some errors don't make sense for move - keep having separate types + panic on implementation errors?
. Be consistent about variable naming (loc vs location) and order (loc/kind in MoveState, kind/loc in Move::Placement)
. Be consistent about taking copy-able types by ref or by value (e.g. loc, dir, etc)

# Rules
x implement carry limit
x win checking
  return continue/colour win as Ok result from make_move
  x road
  x space cover
  x run out of pieces

# Testing
. hand-written tests
  x parse game state from string
    reconstruct number of pieces left etc based on pieces placed

. Parsing tests
  . Add "root cause" method to error type (?)
    The full error type is hard to assert against, and we don't care about the exact chain of parsers that got us there.
    What we care about is that it reports the correct validation error if there is one (e.g. invalid game size, invalid stack),
    or potentially also the input position it failed at.

## Positive testing from playtak history
. create test data processing binary
  . Extract games data from playtak database
  . parse & convert to game history struct (game size + list of moves + end result)
    . this will need a game constructor for different sizes, unless I filter out anything not 5x5
    . I can ignore end result for now
  . serialize to file

. create test harness
  . deserialize test histories from file
  . Run through, verify that no move is ever invalid

. fuzz testing (?)
  . load test histories, randomly mutate moves
    Issues: Can't know easily what error to expect.
            Also might happen to mutate to another valid move.

---
# Tests to add

First round
  x Place non-flat on first round
  x swaps colours

Placement
  . Place into non-empty space

Movement
  Pickup
    . Pick up more than in stack
    . Move above carry limit

  Drops
    . Move on top of standing stone without flattening (flat, other standing)
    . Move on top of standing stone with flattening (capstone onto standing)
    . Move on top of capstone

  Locations
    . Start move outside board
    . Move out of board

Move actions
  . // TODO

Undo
  . Undo past a finalise